 diff --git a/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php b/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
 index 99dbb2a3..cf69386f 100644
 --- a/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
 +++ b/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
 @@ -10,9 +10,11 @@ use Drupal\Core\Extension\ModuleHandlerInterface;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
  use Drupal\Core\Render\RendererInterface;
 +use Drupal\Core\Render\BubbleableMetadata;
  use Drupal\Core\Session\AccountInterface;
  use Drupal\Core\Url;
  use Drupal\views\Views;
 +use Drupal\Core\Utility\Token;
  use Symfony\Component\DependencyInjection\ContainerInterface;

  /**
 @@ -35,7 +37,12 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
       * @var \Drupal\views\ViewExecutable
       */
      protected $view;
 -
 +    /**
 +     * The token service.
 +     *
 +     * @var \Drupal\Core\Utility\Token
 +     */
 +    protected $token;
      /**
       * The renderer.
       *
 @@ -54,14 +61,19 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
       *   The plugin implementation definition.
       * @param \Drupal\Core\Render\RendererInterface $renderer
       *   The current renderer service.
 +     *  @param \Drupal\Core\Session\AccountInterface $current_user
 +     *   The current user.
 +     * @param \Drupal\Core\Utility\Token
 +     *   The token service.
       */
 -    public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer) {
 -        parent::__construct($configuration, $plugin_id, $plugin_definition);
 +    public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer, Token $token) {
 +        parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_manager, $module_handler, $current_user);

          $this->entityManager = $entity_manager;
          $this->moduleHandler = $module_handler;
          $this->currentUser = $current_user;
          $this->renderer = $renderer;
 +        $this->token = $token;
      }

      /**
 @@ -75,7 +87,8 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
              $container->get('entity.manager'),
              $container->get('module_handler'),
              $container->get('current_user'),
 -            $container->get('renderer')
 +            $container->get('renderer'),
 +            $container->get('token')
          );
      }

 @@ -138,7 +151,7 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
                  '#title' => $this->t('View arguments'),
                  '#default_value' => $default,
                  '#required' => FALSE,
 -                '#description' => $this->t('Provide a comma separated list of arguments to pass to the view.'),
 +                '#description' => $this->t('Provide a comma separated list of arguments to pass to the view.'). '<br />' . $this->t('This field supports tokens.'),
              ];
          }
          else {
 @@ -202,7 +215,7 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
       */
      public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
          $display_name = $this->getConfiguration()['view']['display_name'];
 -        $arguments = $this->getConfiguration()['view']['arguments'];
 +        $arguments = $this->handleArgs($this->getConfiguration()['view']['arguments']);
          $result = [];
          if ($this->initializeView($match, $match_operator, $limit)) {
              // Get the results.
 @@ -240,7 +253,7 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
       */
      public function validateReferenceableEntities(array $ids) {
          $display_name = $this->getConfiguration()['view']['display_name'];
 -        $arguments = $this->getConfiguration()['view']['arguments'];
 +        $arguments = $this->handleArgs($this->getConfiguration()['view']['arguments'], FALSE);
          $result = [];
          if ($this->initializeView(NULL, 'CONTAINS', 0, $ids)) {
              // Get the results.
 @@ -279,4 +292,56 @@ class ViewsSelection extends SelectionPluginBase implements ContainerFactoryPlug
          $form_state->setValueForElement($element, $value);
      }

 +    /**
 +     * Handles replacing tokens in arguments for views.
 +     *
 +     * Replaces tokens using Token::replace.
 +     *
 +     * @param array $args
 +     *   An array of arguments that may contain tokens.
 +     * @param bool $bubble_cacheable_metadata
 +     *   If TRUE the cachebility metadata emitted during token replacement will be
 +     *   bubbled to the render context. If FALSE then the it will not in order to
 +     *   prevent leaked cacheability metadata during early rendering.
 +     *
 +     * @return array
 +     *   The arguments to be sent to the View.
 +     */
 +    protected function handleArgs($args, $bubble_cacheable_metadata = TRUE) {
 +        $entities = [];
 +        if (isset($this->configuration['handler_settings']['entity'])) {
 +            $entities[] = $this->configuration['handler_settings']['entity'];
 +        }
 +        if (isset($this->configuration['entity'])) {
 +            $entities[] = $this->configuration['entity'];
 +        }
 +
 +        $data = [];
 +        foreach ($entities as $entity) {
 +            $token_type = $entity->getEntityTypeId();
 +
 +            // Taxonomy term token type doesn't match the entity type's machine name.
 +            if ($token_type === 'taxonomy_term') {
 +                $token_type = 'term';
 +            }
 +
 +            if (!isset($data[$token_type])) {
 +                $data[$token_type] = $entity;
 +            }
 +        }
 +
 +        // If cacheability metadata should not be bubbled then we need to pass in
 +        // our own BubbleableMetadata which will prevent any metadata generated from
 +        // automatically bubbling to the render context.
 +        $bubbleable_metadata = $bubble_cacheable_metadata ? NULL : new BubbleableMetadata();
 +
 +        // Replace tokens for each argument.
 +        foreach ($args as $key => $arg) {
 +            $value = $this->token->replace($arg, $data, ['clear' => TRUE], $bubbleable_metadata);
 +            $args[$key] = !empty($value) ? $value : NULL;
 +        }
 +
 +        return $args;
 +    }
 +
  }
