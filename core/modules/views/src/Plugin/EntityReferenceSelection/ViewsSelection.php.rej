***************
*** 37,48 ****
       * @var \Drupal\views\ViewExecutable
       */
      protected $view;
-     /**
-      * The token service.
-      *
-      * @var \Drupal\Core\Utility\Token
-      */
-     protected $token;
      /**
       * The renderer.
       *
--- 35,41 ----
       * @var \Drupal\views\ViewExecutable
       */
      protected $view;
+ 
      /**
       * The renderer.
       *
***************
*** 61,79 ****
       *   The plugin implementation definition.
       * @param \Drupal\Core\Render\RendererInterface $renderer
       *   The current renderer service.
-      *  @param \Drupal\Core\Session\AccountInterface $current_user
-      *   The current user.
-      * @param \Drupal\Core\Utility\Token
-      *   The token service.
       */
-     public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer, Token $token) {
-         parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_manager, $module_handler, $current_user);
  
          $this->entityManager = $entity_manager;
          $this->moduleHandler = $module_handler;
          $this->currentUser = $current_user;
          $this->renderer = $renderer;
-         $this->token = $token;
      }
  
      /**
--- 54,67 ----
       *   The plugin implementation definition.
       * @param \Drupal\Core\Render\RendererInterface $renderer
       *   The current renderer service.
       */
+     public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer) {
+         parent::__construct($configuration, $plugin_id, $plugin_definition);
  
          $this->entityManager = $entity_manager;
          $this->moduleHandler = $module_handler;
          $this->currentUser = $current_user;
          $this->renderer = $renderer;
      }
  
      /**
***************
*** 87,94 ****
              $container->get('entity.manager'),
              $container->get('module_handler'),
              $container->get('current_user'),
-             $container->get('renderer'),
-             $container->get('token')
          );
      }
  
--- 75,81 ----
              $container->get('entity.manager'),
              $container->get('module_handler'),
              $container->get('current_user'),
+             $container->get('renderer')
          );
      }
  
***************
*** 151,157 ****
                  '#title' => $this->t('View arguments'),
                  '#default_value' => $default,
                  '#required' => FALSE,
-                 '#description' => $this->t('Provide a comma separated list of arguments to pass to the view.'). '<br />' . $this->t('This field supports tokens.'),
              ];
          }
          else {
--- 138,144 ----
                  '#title' => $this->t('View arguments'),
                  '#default_value' => $default,
                  '#required' => FALSE,
+                 '#description' => $this->t('Provide a comma separated list of arguments to pass to the view.'),
              ];
          }
          else {
***************
*** 215,221 ****
       */
      public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
          $display_name = $this->getConfiguration()['view']['display_name'];
-         $arguments = $this->handleArgs($this->getConfiguration()['view']['arguments']);
          $result = [];
          if ($this->initializeView($match, $match_operator, $limit)) {
              // Get the results.
--- 202,208 ----
       */
      public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
          $display_name = $this->getConfiguration()['view']['display_name'];
+         $arguments = $this->getConfiguration()['view']['arguments'];
          $result = [];
          if ($this->initializeView($match, $match_operator, $limit)) {
              // Get the results.
***************
*** 253,259 ****
       */
      public function validateReferenceableEntities(array $ids) {
          $display_name = $this->getConfiguration()['view']['display_name'];
-         $arguments = $this->handleArgs($this->getConfiguration()['view']['arguments'], FALSE);
          $result = [];
          if ($this->initializeView(NULL, 'CONTAINS', 0, $ids)) {
              // Get the results.
--- 240,246 ----
       */
      public function validateReferenceableEntities(array $ids) {
          $display_name = $this->getConfiguration()['view']['display_name'];
+         $arguments = $this->getConfiguration()['view']['arguments'];
          $result = [];
          if ($this->initializeView(NULL, 'CONTAINS', 0, $ids)) {
              // Get the results.
